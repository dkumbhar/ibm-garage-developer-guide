{"componentChunkName":"component---src-pages-getting-started-deploy-app-index-mdx","path":"/getting-started/deploy-app/","result":{"pageContext":{"frontmatter":{"title":"Deploying an App"},"relativePagePath":"/getting-started/deploy-app/index.mdx","titleType":"page","MdxNode":{"id":"bbe5c55e-8423-55d0-ab82-82a4ea70ad37","children":[],"parent":"1b961635-f525-5ba0-a170-cf7391e25cdd","internal":{"content":"---\ntitle: Deploying an App\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nCreate a sample application and deploy it with a CI pipeline\n\n</PageDescription>\n\n## Overview\n\nThe <Globals name=\"env\" /> supports end-to-end development and deployment of an application. This will show you how to do it.\n\nYou can create a new app using one of the [<Globals name=\"templates\" />](/codepatterns/overview). These have been created to include all the key components, configuration, and frameworks to get you started on creating the code you need for your solutions. The approach for getting started is exactly the same for an environment based on **Kubernetes** or **Red Hat OpenShift**.\n\nThis video demonstrates how to work through the steps to create an application and use a deployment pipeline to install it into your development cluster.\n\n<Video src=\"/videos/deployapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Log into you Development Cluster from the command line\n\n- Make sure you have installed all [Prerequisites](/getting-started/prereqs) before continuing\n- Open a terminal\n- Log in to the development cluster's CLI (Kubernetes or Red Hat OpenShift)\n    - To do so, navigate to your cluster in the _IBM Cloud console_, click on the **Access** tab, and follow the instructions to log in to the cluster from the command line\n- You can test that you're connected to the cluster with the following simple command:\n\n<Accordion>\n\n  <AccordionItem title=\"OpenShift\">\n\n  ```bash\n  oc get pods -n tools\n  ```\n\n  </AccordionItem>\n\n  <AccordionItem title=\"Kubernetes\">\n\n  ```bash\n  kubectl get nodes\n  ```\n\n  </AccordionItem>\n\n</Accordion>\n\n\n### Links\n\n<AnchorLinks>\n  <AnchorLink to=\"#open-developer-dashboard\">Open Developer Dashboard</AnchorLink>\n  <AnchorLink to=\"#create-your-app-in-git\">Create your app in Git</AnchorLink>\n  <AnchorLink to=\"#clone-your-code\">Clone your code</AnchorLink>\n  <AnchorLink to=\"#running-locally\">Running Locally</AnchorLink>\n  <AnchorLink to=\"#register-the-app-in-a-devops-pipeline\">Register your pipeline</AnchorLink>\n  <AnchorLink to=\"#view-your-application-pipeline\">View your application pipeline</AnchorLink>\n  <AnchorLink to=\"#access-running-app\">Access running app</AnchorLink>\n  <AnchorLink to=\"#where-is-your-app-running-\">Where is your app running ?</AnchorLink>\n</AnchorLinks>\n\n\n### Open Developer Dashboard\n\nThe [Developer Dashboard](/getting-started/dashboard) makes it easy for you to navigate to the tools, including a section that allows you to select a set of preconfigured [<Globals name=\"templates\" />](/codepatterns/overview) that make seeding your development project very easy.\n\n- Open a browser and make sure you are logged into [Github](https://github.com)\n- Open the dashboard by running the following command:\n    ```\n    igc dashboard\n    ```\n\n### Create your app in Git\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you are developing on a shared education cluster. You need to make it easy to identify your app please suffix the app name with your initials `{app name}-{your initials}` ie. `stockbffnode-mjp` and use the **Git Organisation** listed in your notification email.\n\n</InlineNotification>\n\n- Open the <Globals name=\"dashboard\" />\n- Click on **<Globals name=\"templates\" />** tab\n- Pick one of the templates that is a good architectural fit for your application and the language and framework that you prefer to work with.\n    - Click on a <Globals name=\"template\" /> **Tile** to create your app github repository from the template repository selected.\n    - You can also click on the **Git Icon** to browse the source template repository and click on the **Template** to create the template\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** Your browser needs to be logged in to your GitHub account for a template to work. If the link from the tile displays the GitHub 404 page, log in and reload the page.\n\n</InlineNotification>\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process.\n\n  - **Owner**: Select a validate GitHub organization that you are authorized to create repositories within or the one you were given for the shared cluster (See warning above)\n  - **Repository name**: Enter a valid name for you repo, GitHub will help with showing a green tick if it is valid (See warning above)\n\n  - **Description**: Describe your app\n    ![Template](/images/template.png)\n  - Press **Create repository from template**\n\n\n\nThe new repository will be created in your selected organization.\n\n### Clone your code\n- Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone _SSH link_, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:bwoolf1/stockbffnode.git\n    ```\n- Change into the cloned directory\n    ```\n    cd stockbffnode\n    ```\n- You must rename the app to match your git repo or to a unique name for your solution. Then applications move into a _test_ environment they need to unique names.\n- Edit `package.json` and edit the `name:` field and change it from its template name to your chosen name.\n- Save the edits\n- Push the changes back to your repository\n    ```bash\n    git add .\n    git commit -m \"Update application name\"\n    git push\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. To do so, follow the instructions listed in the **README.md** file to run the code locally. You may be required to install a specific runtime like **Java**, **Node**, or **Python**.\n\n\n### Register the App in a DevOps Pipeline\n\nYou now have the code in a GitHub repository and have cloned it to you local development environment. You now need to register the repository with the continuous integration pipeline. The <Globals name=\"env\" /> supports both [Tekton](/guides/continuous-integration-tekton) and [Jenkins](/guides/continuous-integration) for continuous integration.\n\nYou can use the [IGC CLI](/getting-started/cli) to assist helping register a pipeline with Tekton or Jenkins.\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you are working on a shared education cluster, please deploy your app into a unique project/namespace and continue to do this for all other app creation steps. This will isolate your pipelines into its own namespace/project from other developers working on the same cluster.\n  \n</InlineNotification>\n\nFirst, create your project namespace. (See the CLI documentation for [igc\n namespace](/getting-started/cli#namespace) for details about how the `namespace` command works.)\n \n- Create a namespace/project for your apps \n    ```bash\n    igc namespace dev-{initials} --jenkins --tekton\n    ```\n  \nNow create a pipeline for your repo. (See the CLI documentation for [igc pipeline](/getting-started/cli#pipeline) for details about how the `pipeline` command works.)\n\nYou need to specify whether your CI pipeline will run in Tekton (`--tekton`) or Jenkins (`--jenkins`).\n\nDo not run `igc pipeline` without a namespace, this will cause your pipeline to be created in the default `dev` namespace. Instead, include the namespace we created above as a parameter.\n\n- Create a pipeline in your namespace that uses **Tekton**. For more details\n review the [Continuous Integration with Tekton Guide](/guides/continuous-integration-tekton)\n    ```bash\n    igc pipeline -n $NAMESPACE --tekton\n    ```\n\n- You can alternatively configure your app to use **Jenkins** for CI. For\n  more details review the [Continuous Integration with Jenkins Guide](/guides/continuous-integration)\n    ```bash\n    igc pipeline -n $NAMESPACE --jenkins\n    ```\n  \n- Register your repo using the `igc pipeline` command. The CLI will ask for your GitHub userid, it can be found in your GitHub settings. It will ask for you enter your **Github Personal Access Token** and finally your branch.\n    - **Username**: Enter your GitHub user id\n    - **Password**: Paste your GitHub personal access token\n    - **Branch**: Press enter for the default git branch or type in another branch you want to register\n\n- The output looks like this:\n    ```bash\n    $ igc pipeline -n dev-bw --jenkins\n    Creating secret(s) with git credentials\n      Project git repo: https://github.com/bwoolf1/stockbffnode.git\n    ? Provide the username: bwoolf1\n    ? Provide your password/personal access token: [hidden]\n    ? Provide the branch the pipeline should use: master\n    Registering pipeline: bwoolf1.stockbffnode\n    Creating git webhook\n    Creating webhook to url:  https://c100-e.us-east.containers.cloud.ibm.com\n  :32724/apis/build.openshift.io/v1/namespaces/dev-bw/buildconfigs/bwoolf1\n  .stockbffnode/webhooks/secret101/github\n    ```\n\nThe pipeline will be registered in your development cluster.\n\n### View your application pipeline\n\n- To view you registered pipeline, follow the steps for the type of\n development cluster you registered your application with.\n\n<Tabs>\n<Tab label=\"OpenShift 3.11\">\n\n- Open the OpenShift Web Console from the Developer Cluster instance\n\n![OpenShift](images/openshiftconsole.png)\n\n- From the top menu, switch to the **Application Console**\n Select _dev_ project/namespace or you personal namespace that was used for\n the application pipeine registration\n-- In the left menu, select *Builds* -> *Pipelines*\n\nYou will see your application dev ops pipeline now starting to build and once completed will look like the image below.\n\n![OpenShift](images/ospipeline.png)\n\n</Tab>\n<Tab label=\"OpenShift 4.3\">\n\n- Open the OpenShift Web Console from the Developer Cluster instance\n\n![OpenShift](images/openshiftconsole.png)\n\n- From menu on the left switch to the **Developer**\n- Select _dev_ project/namespace or you personal namespace that was used for\n the application pipeine registration\n- In the left menu, select *Pipelines*\n\nYou will see your application dev ops pipeline now starting to build and once completed will look like the image below.\n\n![OpenShift](images/tektonpipeline.png)\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n- Run the command `igc dashboard` in your terminal to open your [<Globals name=\"dashboard\" />](/getting-started/dashboard)\n- Select the Jenkins tool to open the Jenkins dashboard\n- Run the command `igc credentials` in your terminal to get the list of logins for the tools\n- Use the Jenkins userid and password to log into the Jenkins dashboard\n\nWait for the pipeline stages to start building. Once the stages have completed, you will see a view similar to the one below.\n\n![Jenkins Pipeline](images/pipeline.png)\n\n</Tab>\n</Tabs>\n\n### Access running app\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace or the namespace you used when registering the pipeline.\n\n- To validate the app is running follow these steps.\n\n- To access the app, retrieve the app ingress endpoint using commands below in your terminal, remember to use the namespace you supplied when registering the application.\n    ```bash\n    igc endpoints -n dev-{intials}\n    ```\n  \n  You will see a list of apps displayed with their ingress URLs for the application.\n    ```bash\n    $ igc endpoints -n dev-bw\n    ? Endpoints in the 'dev-bw' namespace. Select an endpoint to launch the default browser or 'Exit'.\n\n      1) Exit\n      2) jenkins-ephemeral - https://jenkins-dev-bw.garage-dev-ocp3-c-460849-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud\n      3) stockbffnode - https://stockbffnode-dev-bw.garage-dev\n  -ocp3-c-460849-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud\n      Answer:\n    ```\n- Use the arrow keys to select the ingress URL and press **Enter** to open it in a web browser and validate the application is working as expected\n\n\n### Where is your app running ?\n\n- The build pipeline is configured to build you source code into a container image. This image is stored in the [Image Registry](/guides/image-registry). The image is then deployed into your namespace/project within you development cluster and validated for its health.\n- Use the steps below to find your application within your cluster console.\n\n<Tabs>\n<Tab label=\"OpenShift 3.11\">\n\n- Open the **OpenShift web console**\n- Change to the **Application Console**\n- Select you project either `dev` or the namespace you used to deploy your app\n- Click on **Deployments**\n- You should see the deployment of your application\n- Click on your application, and the corresponding deployment number\n- Try increasing the number of pods to see new instances being provisioned\n- Click on one of the `pod` instances\n- Click on **Logs**\n- You can see the running state of your application\n- Navigate around the console to understand where your deployment, service and pods are running\n\n![Pods on OpenShift](images/podsos.png)\n\n</Tab>\n\n<Tab label=\"OpenShift 4.3\">\n\n- Open the **OpenShift web console**\n- Change to the **Developer** view\n- Click on **Topology** menu\n\n- Click on your application deployment in the topology view\n- Click on on the **Overview** tab\n- Increase the number of running pods\n- Click **Resource** tab and then on the pod **View Logs** link\n- You can see the running state of your application\n\n![Pods on OpenShift](images/topology.png)\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n- Open the **Kubernetes Dashboard**\n- Change to the namespace from `default` to either `dev` or the namespace you used to deploy your app\n- Click on **Deployments**\n- You should see the deployment of your application\n- Click on your application , and the corresponding **Replica Set**\n- Try scaling the application, click on **Scale** in the header, change number of pods to 2 and click **OK**\n- Click on one of the `pod` instances\n- Click on **Logs**\n- You can see the running state of your application\n- Navigate around the console to understand where your deployment, service and pods are running\n\n![Pods on IKS](images/podsiks.png)\n\n</Tab>\n</Tabs>\n\n- If you have reached this point, we recommend you repeat the process a few\n more times using different code pattern templates and explore you\n  environment to get familiar with it.\n- The [Guides](/guides/overview) will explain more about the tools used in the pipelines\n\n<InlineNotification kind=\"success\">\n\n**Success:** You will now have your application running inside your development cluster.\n\n</InlineNotification>\n\n- This completes the deployment of your app.\n\nYou now have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\n","type":"Mdx","contentDigest":"159f804413f4bf046ede7550444fda69","counter":511,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying an App"},"exports":{},"rawBody":"---\ntitle: Deploying an App\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\nCreate a sample application and deploy it with a CI pipeline\n\n</PageDescription>\n\n## Overview\n\nThe <Globals name=\"env\" /> supports end-to-end development and deployment of an application. This will show you how to do it.\n\nYou can create a new app using one of the [<Globals name=\"templates\" />](/codepatterns/overview). These have been created to include all the key components, configuration, and frameworks to get you started on creating the code you need for your solutions. The approach for getting started is exactly the same for an environment based on **Kubernetes** or **Red Hat OpenShift**.\n\nThis video demonstrates how to work through the steps to create an application and use a deployment pipeline to install it into your development cluster.\n\n<Video src=\"/videos/deployapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Log into you Development Cluster from the command line\n\n- Make sure you have installed all [Prerequisites](/getting-started/prereqs) before continuing\n- Open a terminal\n- Log in to the development cluster's CLI (Kubernetes or Red Hat OpenShift)\n    - To do so, navigate to your cluster in the _IBM Cloud console_, click on the **Access** tab, and follow the instructions to log in to the cluster from the command line\n- You can test that you're connected to the cluster with the following simple command:\n\n<Accordion>\n\n  <AccordionItem title=\"OpenShift\">\n\n  ```bash\n  oc get pods -n tools\n  ```\n\n  </AccordionItem>\n\n  <AccordionItem title=\"Kubernetes\">\n\n  ```bash\n  kubectl get nodes\n  ```\n\n  </AccordionItem>\n\n</Accordion>\n\n\n### Links\n\n<AnchorLinks>\n  <AnchorLink to=\"#open-developer-dashboard\">Open Developer Dashboard</AnchorLink>\n  <AnchorLink to=\"#create-your-app-in-git\">Create your app in Git</AnchorLink>\n  <AnchorLink to=\"#clone-your-code\">Clone your code</AnchorLink>\n  <AnchorLink to=\"#running-locally\">Running Locally</AnchorLink>\n  <AnchorLink to=\"#register-the-app-in-a-devops-pipeline\">Register your pipeline</AnchorLink>\n  <AnchorLink to=\"#view-your-application-pipeline\">View your application pipeline</AnchorLink>\n  <AnchorLink to=\"#access-running-app\">Access running app</AnchorLink>\n  <AnchorLink to=\"#where-is-your-app-running-\">Where is your app running ?</AnchorLink>\n</AnchorLinks>\n\n\n### Open Developer Dashboard\n\nThe [Developer Dashboard](/getting-started/dashboard) makes it easy for you to navigate to the tools, including a section that allows you to select a set of preconfigured [<Globals name=\"templates\" />](/codepatterns/overview) that make seeding your development project very easy.\n\n- Open a browser and make sure you are logged into [Github](https://github.com)\n- Open the dashboard by running the following command:\n    ```\n    igc dashboard\n    ```\n\n### Create your app in Git\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you are developing on a shared education cluster. You need to make it easy to identify your app please suffix the app name with your initials `{app name}-{your initials}` ie. `stockbffnode-mjp` and use the **Git Organisation** listed in your notification email.\n\n</InlineNotification>\n\n- Open the <Globals name=\"dashboard\" />\n- Click on **<Globals name=\"templates\" />** tab\n- Pick one of the templates that is a good architectural fit for your application and the language and framework that you prefer to work with.\n    - Click on a <Globals name=\"template\" /> **Tile** to create your app github repository from the template repository selected.\n    - You can also click on the **Git Icon** to browse the source template repository and click on the **Template** to create the template\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** Your browser needs to be logged in to your GitHub account for a template to work. If the link from the tile displays the GitHub 404 page, log in and reload the page.\n\n</InlineNotification>\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) process.\n\n  - **Owner**: Select a validate GitHub organization that you are authorized to create repositories within or the one you were given for the shared cluster (See warning above)\n  - **Repository name**: Enter a valid name for you repo, GitHub will help with showing a green tick if it is valid (See warning above)\n\n  - **Description**: Describe your app\n    ![Template](/images/template.png)\n  - Press **Create repository from template**\n\n\n\nThe new repository will be created in your selected organization.\n\n### Clone your code\n- Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone _SSH link_, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:bwoolf1/stockbffnode.git\n    ```\n- Change into the cloned directory\n    ```\n    cd stockbffnode\n    ```\n- You must rename the app to match your git repo or to a unique name for your solution. Then applications move into a _test_ environment they need to unique names.\n- Edit `package.json` and edit the `name:` field and change it from its template name to your chosen name.\n- Save the edits\n- Push the changes back to your repository\n    ```bash\n    git add .\n    git commit -m \"Update application name\"\n    git push\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. To do so, follow the instructions listed in the **README.md** file to run the code locally. You may be required to install a specific runtime like **Java**, **Node**, or **Python**.\n\n\n### Register the App in a DevOps Pipeline\n\nYou now have the code in a GitHub repository and have cloned it to you local development environment. You now need to register the repository with the continuous integration pipeline. The <Globals name=\"env\" /> supports both [Tekton](/guides/continuous-integration-tekton) and [Jenkins](/guides/continuous-integration) for continuous integration.\n\nYou can use the [IGC CLI](/getting-started/cli) to assist helping register a pipeline with Tekton or Jenkins.\n\n<InlineNotification kind=\"warning\">\n\n**Warning:** If you are working on a shared education cluster, please deploy your app into a unique project/namespace and continue to do this for all other app creation steps. This will isolate your pipelines into its own namespace/project from other developers working on the same cluster.\n  \n</InlineNotification>\n\nFirst, create your project namespace. (See the CLI documentation for [igc\n namespace](/getting-started/cli#namespace) for details about how the `namespace` command works.)\n \n- Create a namespace/project for your apps \n    ```bash\n    igc namespace dev-{initials} --jenkins --tekton\n    ```\n  \nNow create a pipeline for your repo. (See the CLI documentation for [igc pipeline](/getting-started/cli#pipeline) for details about how the `pipeline` command works.)\n\nYou need to specify whether your CI pipeline will run in Tekton (`--tekton`) or Jenkins (`--jenkins`).\n\nDo not run `igc pipeline` without a namespace, this will cause your pipeline to be created in the default `dev` namespace. Instead, include the namespace we created above as a parameter.\n\n- Create a pipeline in your namespace that uses **Tekton**. For more details\n review the [Continuous Integration with Tekton Guide](/guides/continuous-integration-tekton)\n    ```bash\n    igc pipeline -n $NAMESPACE --tekton\n    ```\n\n- You can alternatively configure your app to use **Jenkins** for CI. For\n  more details review the [Continuous Integration with Jenkins Guide](/guides/continuous-integration)\n    ```bash\n    igc pipeline -n $NAMESPACE --jenkins\n    ```\n  \n- Register your repo using the `igc pipeline` command. The CLI will ask for your GitHub userid, it can be found in your GitHub settings. It will ask for you enter your **Github Personal Access Token** and finally your branch.\n    - **Username**: Enter your GitHub user id\n    - **Password**: Paste your GitHub personal access token\n    - **Branch**: Press enter for the default git branch or type in another branch you want to register\n\n- The output looks like this:\n    ```bash\n    $ igc pipeline -n dev-bw --jenkins\n    Creating secret(s) with git credentials\n      Project git repo: https://github.com/bwoolf1/stockbffnode.git\n    ? Provide the username: bwoolf1\n    ? Provide your password/personal access token: [hidden]\n    ? Provide the branch the pipeline should use: master\n    Registering pipeline: bwoolf1.stockbffnode\n    Creating git webhook\n    Creating webhook to url:  https://c100-e.us-east.containers.cloud.ibm.com\n  :32724/apis/build.openshift.io/v1/namespaces/dev-bw/buildconfigs/bwoolf1\n  .stockbffnode/webhooks/secret101/github\n    ```\n\nThe pipeline will be registered in your development cluster.\n\n### View your application pipeline\n\n- To view you registered pipeline, follow the steps for the type of\n development cluster you registered your application with.\n\n<Tabs>\n<Tab label=\"OpenShift 3.11\">\n\n- Open the OpenShift Web Console from the Developer Cluster instance\n\n![OpenShift](images/openshiftconsole.png)\n\n- From the top menu, switch to the **Application Console**\n Select _dev_ project/namespace or you personal namespace that was used for\n the application pipeine registration\n-- In the left menu, select *Builds* -> *Pipelines*\n\nYou will see your application dev ops pipeline now starting to build and once completed will look like the image below.\n\n![OpenShift](images/ospipeline.png)\n\n</Tab>\n<Tab label=\"OpenShift 4.3\">\n\n- Open the OpenShift Web Console from the Developer Cluster instance\n\n![OpenShift](images/openshiftconsole.png)\n\n- From menu on the left switch to the **Developer**\n- Select _dev_ project/namespace or you personal namespace that was used for\n the application pipeine registration\n- In the left menu, select *Pipelines*\n\nYou will see your application dev ops pipeline now starting to build and once completed will look like the image below.\n\n![OpenShift](images/tektonpipeline.png)\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n- Run the command `igc dashboard` in your terminal to open your [<Globals name=\"dashboard\" />](/getting-started/dashboard)\n- Select the Jenkins tool to open the Jenkins dashboard\n- Run the command `igc credentials` in your terminal to get the list of logins for the tools\n- Use the Jenkins userid and password to log into the Jenkins dashboard\n\nWait for the pipeline stages to start building. Once the stages have completed, you will see a view similar to the one below.\n\n![Jenkins Pipeline](images/pipeline.png)\n\n</Tab>\n</Tabs>\n\n### Access running app\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace or the namespace you used when registering the pipeline.\n\n- To validate the app is running follow these steps.\n\n- To access the app, retrieve the app ingress endpoint using commands below in your terminal, remember to use the namespace you supplied when registering the application.\n    ```bash\n    igc endpoints -n dev-{intials}\n    ```\n  \n  You will see a list of apps displayed with their ingress URLs for the application.\n    ```bash\n    $ igc endpoints -n dev-bw\n    ? Endpoints in the 'dev-bw' namespace. Select an endpoint to launch the default browser or 'Exit'.\n\n      1) Exit\n      2) jenkins-ephemeral - https://jenkins-dev-bw.garage-dev-ocp3-c-460849-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud\n      3) stockbffnode - https://stockbffnode-dev-bw.garage-dev\n  -ocp3-c-460849-0143c5dd31acd8e030a1d6e0ab1380e3-0001.us-east.containers.appdomain.cloud\n      Answer:\n    ```\n- Use the arrow keys to select the ingress URL and press **Enter** to open it in a web browser and validate the application is working as expected\n\n\n### Where is your app running ?\n\n- The build pipeline is configured to build you source code into a container image. This image is stored in the [Image Registry](/guides/image-registry). The image is then deployed into your namespace/project within you development cluster and validated for its health.\n- Use the steps below to find your application within your cluster console.\n\n<Tabs>\n<Tab label=\"OpenShift 3.11\">\n\n- Open the **OpenShift web console**\n- Change to the **Application Console**\n- Select you project either `dev` or the namespace you used to deploy your app\n- Click on **Deployments**\n- You should see the deployment of your application\n- Click on your application, and the corresponding deployment number\n- Try increasing the number of pods to see new instances being provisioned\n- Click on one of the `pod` instances\n- Click on **Logs**\n- You can see the running state of your application\n- Navigate around the console to understand where your deployment, service and pods are running\n\n![Pods on OpenShift](images/podsos.png)\n\n</Tab>\n\n<Tab label=\"OpenShift 4.3\">\n\n- Open the **OpenShift web console**\n- Change to the **Developer** view\n- Click on **Topology** menu\n\n- Click on your application deployment in the topology view\n- Click on on the **Overview** tab\n- Increase the number of running pods\n- Click **Resource** tab and then on the pod **View Logs** link\n- You can see the running state of your application\n\n![Pods on OpenShift](images/topology.png)\n\n</Tab>\n\n<Tab label=\"Kubernetes\">\n\n- Open the **Kubernetes Dashboard**\n- Change to the namespace from `default` to either `dev` or the namespace you used to deploy your app\n- Click on **Deployments**\n- You should see the deployment of your application\n- Click on your application , and the corresponding **Replica Set**\n- Try scaling the application, click on **Scale** in the header, change number of pods to 2 and click **OK**\n- Click on one of the `pod` instances\n- Click on **Logs**\n- You can see the running state of your application\n- Navigate around the console to understand where your deployment, service and pods are running\n\n![Pods on IKS](images/podsiks.png)\n\n</Tab>\n</Tabs>\n\n- If you have reached this point, we recommend you repeat the process a few\n more times using different code pattern templates and explore you\n  environment to get familiar with it.\n- The [Guides](/guides/overview) will explain more about the tools used in the pipelines\n\n<InlineNotification kind=\"success\">\n\n**Success:** You will now have your application running inside your development cluster.\n\n</InlineNotification>\n\n- This completes the deployment of your app.\n\nYou now have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\n","fileAbsolutePath":"/home/travis/build/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/getting-started/deploy-app/index.mdx"}}}}