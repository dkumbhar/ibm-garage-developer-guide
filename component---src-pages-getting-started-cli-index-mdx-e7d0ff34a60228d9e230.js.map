{"version":3,"sources":["webpack:///./src/pages/getting-started/cli/index.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","Accordion","AccordionItem","InlineNotification","Tabs","Tab","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","title","kind","label","isMDXComponent"],"mappings":"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","file":"component---src-pages-getting-started-cli-index-mdx-e7d0ff34a60228d9e230.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/ibm-garage-cloud/ibm-garage-developer-guide/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst Accordion = makeShortcode(\"Accordion\");\nconst AccordionItem = makeShortcode(\"AccordionItem\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`The `}<Globals name=\"shortName\" mdxType=\"Globals\" />{` Command Line Interface (CLI)`}</p>\n    </PageDescription>\n    <p>{`The `}<Globals name=\"longName\" mdxType=\"Globals\" />{` includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI). The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli\"\n      }}><Globals name=\"igccli\" mdxType=\"Globals\" /></a>{` provides a set of helpful utilities that can be invoked from the command line. The main objective is to make complicated CLI tasks and `}<inlineCode parentName=\"p\">{`YAML`}</inlineCode>{`,`}<inlineCode parentName=\"p\">{`configMap`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`secret`}</inlineCode>{` configuration easier for a developer.`}</p>\n    <p>{`These utilities include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Register your application’s git repo into a CI pipeline (`}<a parentName=\"li\" {...{\n          \"href\": \"/guides/continuous-integration\"\n        }}>{`Jenkins`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/guides/continuous-integration-tekton\"\n        }}>{`Tekton`}</a>{`, etc.)`}</li>\n      <li parentName=\"ul\">{`List the ingress URLs for the tools installed in the environment`}</li>\n      <li parentName=\"ul\">{`List the user names and passwords for the tools installed in the environment`}</li>\n      <li parentName=\"ul\">{`Build and deploy images to the environment using the IBM Cloud Image Registry`}</li>\n      <li parentName=\"ul\">{`Help copy `}<inlineCode parentName=\"li\">{`configMaps`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`secrets`}</inlineCode>{` into new projects/namespace in Kubernetes or OpenShift`}</li>\n      <li parentName=\"ul\">{`Enable existing `}<Globals name=\"templates\" mdxType=\"Globals\" />{` with the necessary artifacts to be integrated easily into the `}<Globals name=\"env\" mdxType=\"Globals\" /></li>\n    </ul>\n    <p>{`You can either install the CLI onto your computer or install the Cloud Shell Commands environment.`}</p>\n    <Accordion mdxType=\"Accordion\">\n      <AccordionItem title=\"Install the CLI\" mdxType=\"AccordionItem\">\n        <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n**Warning:** If you have installed the **IGC** CLI up to `v0.4.0` you must\n uninstall it and follow the installation steps below\n`npm rm -g @garage-catalyst/ibm-garage-cloud-cli`\n        </InlineNotification>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Install the CLI:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Verify the version:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`igc --version\n`}</code></pre>\n          </li>\n        </ul>\n      </AccordionItem>\n      <AccordionItem title=\"Install the Cloud Shell\" mdxType=\"AccordionItem\">\n        <p>{`Follow the instructions in the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md\"\n          }}>{`cloud-shell-commands readme`}</a>{` to install the Cloud Shell Commands.`}</p>\n      </AccordionItem>\n    </Accordion>\n    <h2>{`CLI help`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Run the CLI’s help command to list the available commands:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc --help\n`}</code></pre>\n        <p parentName=\"li\">{`  The help output looks like this:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`$ igc --help\nIBM Garage Cloud CLI\n\nUsage: igc <command> [args]\n\nCommands:\n  igc build              Build the image and push it into the IBM Cloud registry\n  igc create-webhook     Create a git webhook for a given Jenkins pipeline\n  igc credentials        Lists the urls and credentials for the tools deployed\n                         to the cluster\n  igc dashboard          Open the dashboard url in the default browser\n  igc deploy             Deploy an image from the IBM Cloud registry into a\n                         kubernetes cluster\n  igc enable             Enable the current repository with pipeline logic\n  igc endpoints          List the current ingress hosts for deployed apps in a\n                         namespace       [aliases: ingress, endpoint, ingresses]\n  igc generate-token     Generate a Jenkins api token\n  igc git-secret [name]  Create a kubernetes secret that contains the url,\n                         username, and personal access token for a git repo\n  igc jenkins-auth       Generate a Jenkins api token and register it as\n                         kubernetes secret\n  igc launch-tools       Launch the IBM Garage for Cloud tools image connected\n                         to the current directory\n  igc login              Log in using the ibmcloud cli, optionally configure the\n                         cluster, and optionally runs a command\n  igc namespace          Create a namespace (if it doesn't exist) and prepare it\n                         with the necessary configuration\n  igc pipeline           Register a pipeline for the current code repository\n  igc tool-config        Create the config map and secret for a tool configured\n                         in the environment\n  igc vlan               Print out the vlan values\n  igc yq <command>\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n`}</code></pre>\n        <p parentName=\"li\">{`  The help for a specific command, `}<inlineCode parentName=\"p\">{`pipeline`}</inlineCode>{`, looks like this:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`$ igc pipeline --help\nigc pipeline\n\nRegister a pipeline for the current code repository\n\nOptions:\n  --version                Show version number                         [boolean]\n  --help                   Show help                                   [boolean]\n  --quiet                  Suppress all logging                        [boolean]\n  --debug                  Turn on extra logging                       [boolean]\n  --templateNamespace, -j  the namespace where Jenkins is running       [string]\n  --pipelineNamespace, -n  the namespace where the pipeline should be deployed\n                                                                        [string]\n  --skipWebhook            flag indicating that the webhook should not be\n                           created                                     [boolean]\n  --gitUsername, -u        username used to access the git repository\n  --gitPat, -p             the token used to authenticate the user\n  --values                 optional file with additional values to add to the\n                           secret\n  --tekton                 register a tekton pipeline                  [boolean]\n  --jenkins                register a jenkins pipeline                 [boolean]\n  --pipelineName           the name of the Tekton pipeline to use       [string]\n  --generateCrumb, -c      flag indicating that a crumb is required to complete\n                           the registration                     [default: false]\n`}</code></pre>\n      </li>\n    </ul>\n    <h2>{`Use the CLI`}</h2>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`To use the `}<Globals name=\"igccli\" mdxType=\"Globals\" />{`, first install the `}<a parentName=\"p\" {...{\n          \"href\": \"/getting-started/prereqs\"\n        }}>{`prerequisite tools`}</a>{`, which include:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`The `}<Globals name=\"ic\" mdxType=\"Globals\" />{` CLI`}</li>\n        <li parentName=\"ul\">{`The `}<Globals name=\"kube\" mdxType=\"Globals\" />{` CLI`}</li>\n        <li parentName=\"ul\">{`The `}<Globals name=\"ocp\" mdxType=\"Globals\" />{` CLI`}</li>\n      </ul>\n    </InlineNotification>\n    <p>{`To use the `}<Globals name=\"igccli\" mdxType=\"Globals\" />{`, most commands require that you be logged into your `}<Globals name=\"ic\" mdxType=\"Globals\" />{` account and cluster.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Log into your `}<Globals name=\"ic\" mdxType=\"Globals\" />{` account with the correct region and resource group:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Log into your cluster:`}</p>\n      </li>\n    </ul>\n    <Accordion mdxType=\"Accordion\">\n      <AccordionItem title=\"Kubernetes\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`ibmcloud ks cluster config --cluster <CLUSTER>\n`}</code></pre>\n      </AccordionItem>\n      <AccordionItem title=\"OpenShift\" mdxType=\"AccordionItem\">\n        <pre><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`oc login --server=<url> --token=<apikey>\n`}</code></pre>\n      </AccordionItem>\n    </Accordion>\n    <p>{`Once logged in, you can use the CLI commands.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`For example, this command lists the dashboard ingress URLs for all of the tools installed in the `}<inlineCode parentName=\"li\">{`tools`}</inlineCode>{` namespace:`}<pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc endpoints -n tools\n`}</code></pre></li>\n    </ul>\n    <h2>{`Available commands`}</h2>\n    <h3>{`vlan`}</h3>\n    <p>{`Lists the VLANs for a particular IBM Cloud region. This information is useful for preparing Terraform cluster creation steps.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cloud region. It does NOT need to be logged in to a cluster.`}</p>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`List a pair of public/private VLANs for a new environment to use`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc vlan\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`dashboard`}</h3>\n    <p>{`Opens the `}<a parentName=\"p\" {...{\n        \"href\": \"/getting-started/dashboard\"\n      }}>{`Developer Dashboard`}</a>{` in the default browser. If a default browser has not been configured, then the URL to the Dashboard will be printed out.`}</p>\n    <p>{`The dashboard is deployed in a namespace and displays the tools deployed in the same namesapce, as listed by the `}<inlineCode parentName=\"p\">{`credentials`}</inlineCode>{` command. Additional tools can be deployed to the namespace; then use the `}<inlineCode parentName=\"p\">{`tool-config`}</inlineCode>{` command to add a tool to the list of credentials and add a panel to the dashboard.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cluster.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-n`}</inlineCode>{` — The namespace where the dashboard has been deployed; the default is `}<inlineCode parentName=\"li\">{`tools`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Open the dashboard in the default browser`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc dashboard\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`credentials`}</h3>\n    <p>{`Lists the endpoints and credentials for the tools running in the environment. The tools reported include Jenkins, SonarQube, ArgoCD, etc.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cluster.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-n`}</inlineCode>{` — The namespace where the tools have been deployed; the default is `}<inlineCode parentName=\"li\">{`tools`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`List the credentials for the tools installed in the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc credentials -n my-namespace\n`}</code></pre>\n        <p parentName=\"li\">{`  The credentials output is a JSON doc like this`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`$ igc credentials\nCredentials:  {\n  argocd: {\n    user: 'admin',\n    password: '12345678',\n    url: 'https://argocd-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n  dashboard: {\n    url: 'https://dashboard-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`tool-config`}</h3>\n    <p>{`Configures a new tool in the environment. After deploying the tool, use this command to add the tool to the list of credentials so that it will be displayed in the dashboard.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`The name for the tool`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-n`}</inlineCode>{` — The tools namespace; the default is `}<inlineCode parentName=\"li\">{`tools`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--url`}</inlineCode>{` — The endpoint for accessing the tool, usually its dashboard`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--username`}</inlineCode>{` — (Optional) The user name for logging into to tool`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--password`}</inlineCode>{` — (Optional) The password for logging into to tool`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Configure a tool named `}<inlineCode parentName=\"p\">{`my-tool`}</inlineCode>{` with its dashboard’s endpoint and credentials`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc tool-config my-tool --url https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud --username admin --password password\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`endpoints`}</h3>\n    <p>{`Lists the ingress and/or route URLs for the applications in a namespace. The results are provided in an interactive menu. If one of the endpoints is selected, it will display the URL and launch it in the default browser. Selecting `}<inlineCode parentName=\"p\">{`Exit`}</inlineCode>{` will display the full list and exit.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cluster.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-n`}</inlineCode>{` — The deployment namespace; the default is `}<inlineCode parentName=\"li\">{`dev`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`List the ingresses and route URLs for the apps running in the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc endpoint -n tools\n`}</code></pre>\n      </li>\n    </ul>\n    <h3>{`namespace`}</h3>\n    <p>{`Creates a Kubernetes namespace or OpenShift project (if it doesn’t already exist) and adds the necessary data and tools to make it work well as part of the `}<Globals name=\"env\" mdxType=\"Globals\" />{`.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cluster.`}</p>\n    <p>{`The command adds a service account to the namespace containing the pull secrets for pulling images from the `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/image-registry\"\n      }}>{`image registry`}</a>{`. This enables the namespace to deploy containers from the registry.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-z`}</inlineCode>{` — The name of the service account; the default is `}<inlineCode parentName=\"li\">{`default`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a namespace for performing testing, one that can deploy containers from the image registry`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc namespace test\n`}</code></pre>\n      </li>\n    </ul>\n    <p>{`If the cluster is OpenShift, each build will be run in the developer’s project, so this command copies the resources needed to run the build pipeline from a template project that already has these resources (certain config maps and secrets that the pipeline uses). The project can be set up to run Jenkins pipelines, Tekton pipelines, or both.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-t`}</inlineCode>{` — The template namespace; the default is `}<inlineCode parentName=\"li\">{`tools`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--jenkins`}</inlineCode>{` — Install Jenkins into the namespace`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--tekton`}</inlineCode>{` — Copy the available Tasks and Pipelines from the template namespace`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a namespace for building a Stock Trading app using Jenkins pipelines defined in the `}<inlineCode parentName=\"p\">{`tools`}</inlineCode>{` namespace`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc namespace dev-stock --jenkins\n`}</code></pre>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Manual steps`}</strong></p>\n    <p>{`Here is a comparison between how the `}<inlineCode parentName=\"p\">{`namespace`}</inlineCode>{` command works and the equivalent manual steps.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To simplify steps, set an environment variable with your namespace`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`export NAMESPACE=dev-{initial}\n`}</code></pre>\n      </li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using the CLI\" mdxType=\"Tab\">\nRun the `namespace` command to create the namespace and set it up.\n        <ul>\n          <li parentName=\"ul\">{`if Jenkins pipelines will be run in the namespace, include the `}<inlineCode parentName=\"li\">{`--jenkins`}</inlineCode>{` flag`}</li>\n          <li parentName=\"ul\">{`if Tekton pipelines will be run in the namespace, include the `}<inlineCode parentName=\"li\">{`--tekton`}</inlineCode>{` flag`}</li>\n          <li parentName=\"ul\">{`if both Jenkins and Tekton pipelines will be run, include both flags`}</li>\n        </ul>\n        <p>{`For example`}</p>\n        <pre><code parentName=\"pre\" {...{}}>{`igc namespace $NAMESPACE --jenkins --tekton\n`}</code></pre>\n      </Tab>\n      <Tab label=\"Manual steps for OpenShift\" mdxType=\"Tab\">\n        <ol>\n  <li>Create the namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc new-project $NAMESPACE\n`}</code></pre>\n  </li>\n  <li>Copy the pull secrets from the default namespace into your new namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`curl -OL https://raw.githubusercontent.com/ibm-garage-cloud/garage-terraform-modules/master/generic/cluster/namespaces/scripts/setup-namespace-pull-secrets.sh\n./setup-namespace-pull-secrets.sh $NAMESPACE\n`}</code></pre>\n  </li>\n  <li>Copy the ConfigMaps and Secrets from the tools namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export sourcenamespace=tools;\nkubectl get configmap -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get configmap \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get secret -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get secret \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n`}</code></pre>\n  </li>\n  <li>If you will be using Jenkins, install Jenkins in the namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`oc new-app jenkins-ephemeral -n $NAMESPACE\n`}</code></pre>\n  </li>\n  <li>If you will be using Tekton, copy the Tekton tasks\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export sourcenamespace=tools;\nkubectl get tasks.tekton.dev -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get tasks.tekton.dev \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get pipelines.tekton.dev -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get pipelines.tekton.dev \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n`}</code></pre>\n  </li>\n        </ol>\n      </Tab>\n      <Tab label=\"Manual steps for Kubernetes\" mdxType=\"Tab\">\n        <ol>\n  <li>Create the namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`kubectl create namespace $NAMESPACE\n`}</code></pre>\n  </li>\n  <li>Copy the pull secrets from the default namespace into your new namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`curl -OL https://raw.githubusercontent.com/ibm-garage-cloud/garage-terraform-modules/master/generic/cluster/namespaces/scripts/setup-namespace-pull-secrets.sh\n./setup-namespace-pull-secrets.sh $NAMESPACE\n`}</code></pre>\n  </li>\n  <li>Copy the ConfigMaps and Secrets from the tools namespace\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export sourcenamespace=tools;\nkubectl get configmap -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get configmap \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get secret -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get secret \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n`}</code></pre>\n  </li>\n  <li>If you will be using Tekton, copy the Tekton tasks\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`export sourcenamespace=tools;\nkubectl get tasks.tekton.dev -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get tasks.tekton.dev \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get pipelines.tekton.dev -l grouping=garage-cloud-native-toolkit -n \\${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\\\n\" }{ end }' | \\\\\n  while read cm; do\n    kubectl get pipelines.tekton.dev \\${cm} --namespace \\${sourcenamespace} --export -o yaml | \\\\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n`}</code></pre>\n  </li>\n        </ol>\n      </Tab>\n    </Tabs>\n    <h3>{`pipeline`}</h3>\n    <p>{`Connects a branch in a Git repo to a CI pipeline in the `}<Globals name=\"env\" mdxType=\"Globals\" />{` and triggers an initial build. When a new commit is added to the branch, that triggers the pipeline to run, which will rebuild and redeploy the app using the new code. The Git repo needs to be hosted using a site that supports triggers such as GitHub or GitLab. The environment supports CI pipelines implemented using Tekton or Jenkins.`}</p>\n    <p>{`This command requires that the terminal is already logged in to the cluster. It also requires that the terminal’s current directory is the repository directory for your local copy of the Git repo. The command will use the local Git repo’s configuration to find the server copy.`}</p>\n    <p>{`The command will prompt for the username and personal access token to access the Git repository, unless those are provided as command-line parameters. It will also prompt you for the branch to use to trigger builds; the default is `}<inlineCode parentName=\"p\">{`master`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-n`}</inlineCode>{` — The deployment namespace; the default is `}<inlineCode parentName=\"li\">{`dev`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-u`}</inlineCode>{` — The username for accessing the Git repo`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`-p`}</inlineCode>{` — The personal access token for accessing the Git repo`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--jenkins`}</inlineCode>{` — Deploy using a Jenkins pipeline; this is the default`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--tekton`}</inlineCode>{` — Deploy using a Tekton pipeline`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a Jenkins pipeline in the `}<inlineCode parentName=\"p\">{`dev`}</inlineCode>{` namespace and prompt for the Git credentials`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc pipeline --jenkins\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Create a Tekton pipeline in the `}<inlineCode parentName=\"p\">{`my-dev`}</inlineCode>{` namespace, using the Git credentials `}<inlineCode parentName=\"p\">{`gituser`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`gitpat`}</inlineCode></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc pipeline -n my-dev -u gituser -p gitpat --tekton\n`}</code></pre>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`Manual steps`}</strong></p>\n    <p>{`Here is a comparison between how the `}<inlineCode parentName=\"p\">{`pipeline`}</inlineCode>{` command works and the equivalent manual steps for Tekton.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"IGC Steps\" mdxType=\"Tab\">\n        <p>{`One of the objectives of the `}<strong parentName=\"p\">{`IBM Garage for Cloud Developer tools CLI`}</strong>{` is to\nremove complexity from the steps of configuring apps with OpenShift and\nKubernetes managed service.`}</p>\n        <br></br>\n        <p>{`The `}<inlineCode parentName=\"p\">{`IBM Garage CLI`}</inlineCode>{` has been created to automate manual steps where it is\ndeemed necessary. When it comes to configuring `}<strong parentName=\"p\">{`Tekton`}</strong>{` there are a number\nof key steps that developers can performing manually,  often with complex\nmanual steps the developer can introduce errors causing mistakes that are\nhard to debug. This\nis a perfect problem to be solved with simple automation.`}</p>\n        <br></br>\n        <p>{`If you are happy to perform the manual steps switch over to the `}<strong parentName=\"p\">{`Manual\nSteps`}</strong>{` tab above to understand what is required to configure a `}<strong parentName=\"p\">{`Tekton`}</strong>{` Pipeline in Openshift or Kubernetes managed services manually.`}</p>\n        <br></br>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`The CLI has support for `}<strong parentName=\"p\">{`Tekton`}</strong>{` by adding a `}<inlineCode parentName=\"p\">{`--tekton`}</inlineCode>{` parameter to\nthe `}<inlineCode parentName=\"p\">{`igc\npipeline`}</inlineCode>{` command.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`igc pipeline -n dev-{initials} --tekton\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`This will prepare the namespace/project with the necessary `}<inlineCode parentName=\"p\">{`Tasks`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Pipelines`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Secrets`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`configMaps`}</inlineCode>{` needed for the `}<inlineCode parentName=\"p\">{`Pipelines`}</inlineCode>{` to\nexecute inside the Tekton CI environment.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{\n                \"className\": \"language-bash\"\n              }}>{`Getting git parameters\n  Project git repo: https://github.com/mooc-team-one/hello-world-one.git\n? Provide the username: {git userid}\n? Provide your password/personal access token: [hidden]\n? Provide the branch the pipeline should use: master\nSetting up dev-mjp namespace\nChecking for existing namespace: dev-mjp\nSetting up pull secrets\nSetting up tls secrets\nAdding pull secrets to serviceAccount\nCopying ConfigMaps\nCopying Secrets\nCopying Tekton tasks\nCopying Tekton pipelines\nCopying Jenkins credentials\nCreating service account: pipeline\nCreating Git PipelineResource\nCreating Image PipelineResource\n? Select the Pipeline to use in the PipelineRun: igc-nodejs\nCreating PipelineRun for pipeline: igc-nodejs\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Once the App has been configured to be built and managed by `}<strong parentName=\"p\">{`Tekton`}</strong>{` you\ncan now view the `}<inlineCode parentName=\"p\">{`Pipeline`}</inlineCode>{` progress using the various Tekton Dashboards or\n`}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI.`}</p>\n          </li>\n        </ul>\n      </Tab>\n      <Tab label=\"Manual Steps for Tekton\" mdxType=\"Tab\">\n        <p>{`The following is the list of steps required to manually configure a `}<strong parentName=\"p\">{`Tekton\n`}</strong>{` pipeline with your development cluster.`}</p>\n        <br></br>\n        <ul>\n          <li parentName=\"ul\">{`Configure the service account `}<inlineCode parentName=\"li\">{`pipeline`}</inlineCode>{` if it doesn’t exist, on OpenShift 4 the operator takes care of this you can skip.`}<pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create serviceaccount pipeline\noc adm policy add-scc-to-user privileged -z pipeline\noc adm policy add-role-to-user edit -z pipeline\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Clone the tasks from the `}<inlineCode parentName=\"li\">{`tools`}</inlineCode>{` namespace into the `}<inlineCode parentName=\"li\">{`new-namespace`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`kubectl get tasks --export -o yaml -n tools  | sed s/\"namespace: tools/namespace: $(oc project -q)\"/ | kubectl apply -f -\n`}</code></pre></li>\n          <li parentName=\"ul\">{`Clone the pipelines from the `}<inlineCode parentName=\"li\">{`tools`}</inlineCode>{` namespace into the `}<inlineCode parentName=\"li\">{`new-namespace`}</inlineCode><pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`kubectl get pipelines --export -o yaml -n tools  | sed s/\"namespace: tools/namespace: $(oc project -q)\"/ | kubectl apply -f -\n`}</code></pre></li>\n        </ul>\n        <h3>{`Manually trigger a Pipeline`}</h3>\n        <h3>{`Pipeline Resource`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create a Pipeline resource for the git repository, replace with the correct github url for your repository\nUse the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI to create `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{` resource input the github repo url for `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` and branch for `}<inlineCode parentName=\"p\">{`revision`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn resource create\n`}</code></pre>\n            <p parentName=\"li\">{`Here is the an example of the cli`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn resource create\n? Enter a name for a pipeline resource : nodejs-typescript-git\n? Select a resource type to create : git\n? Enter a value for url :  https://github.com/{user or org}/{app}\n? Enter a value for revision :  master\nNew git resource \"nodejs-typescript-git\" has been created\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create a Pipeline resource for the docker image registry, you can use the internal registry in OpenShift or use an external registry like IBM Container Registry (credentials need setup)\nUse the `}<inlineCode parentName=\"p\">{`tkn`}</inlineCode>{` CLI to create `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` resource`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn resource create\n`}</code></pre>\n            <p parentName=\"li\">{`Select `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` for type.`}</p>\n            <p parentName=\"li\">{`Enter the corresponding `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` for container registry, use the new-namespace} in the url`}</p>\n            <p parentName=\"li\">{`For OCP 3 internal registry use `}<inlineCode parentName=\"p\">{`docker-registry.default.svc:5000/{new-namespace}/node-typescript:latest`}</inlineCode></p>\n            <p parentName=\"li\">{`For OCP 4 or CRC internal registry use `}<inlineCode parentName=\"p\">{`image-registry.openshift-image-registry.svc:5000/{new-namespace}/node-typescript:latest`}</inlineCode></p>\n            <p parentName=\"li\">{`For external registry like IBM Container registry based on region use `}<inlineCode parentName=\"p\">{`us.icr.io/{namespace}/node-typescript:latest`}</inlineCode>{` use an existing namespace in your IBM Cloud`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn resource create\n? Enter a name for a pipeline resource : nodejs-typescript-image\n? Select a resource type to create : image\n? Enter a value for url :  docker-registry.default.svc:5000/dev/node-typescript:latest\n? Enter a value for digest :\nNew image resource \"nodejs-typescript-image\" has been created\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Select the pipeline, to show the available pipeline run`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn pipeline ls\nNAME              AGE              LAST RUN   STARTED   DURATION   STATUS\nigc-java-gradle   33 minutes ago   ---        ---       ---        ---\nigc-nodejs        33 minutes ago   ---        ---       ---        ---\n`}</code></pre>\n            <p parentName=\"li\">{`In this case use `}<inlineCode parentName=\"p\">{`igc-java-gradle`}</inlineCode>{` for java or `}<inlineCode parentName=\"p\">{`igc-nodejs`}</inlineCode>{` for nodejs.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Run the Pipeline using the `}<inlineCode parentName=\"p\">{`git`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` Pipeline resources.\nSet the following environment variable for convienience:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`export PIPELINE=igc-nodejs\nexport GIT=nodejs-typescript-git\nexport IMAGE=nodejs-typescript-image\n`}</code></pre>\n            <p parentName=\"li\">{`Then run the `}<inlineCode parentName=\"p\">{`tkn pipeline start`}</inlineCode>{` with the input arguments using the service account `}<inlineCode parentName=\"p\">{`pipeline`}</inlineCode></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`tkn pipeline start \\\\\n\\${PIPELINE} \\\\\n-r git-source=\\${GIT} \\\\\n-r docker-image=\\${IMAGE} \\\\\n-s pipeline\n`}</code></pre>\n          </li>\n        </ul>\n        <h3>{`Create a Git Webhook`}</h3>\n        <ul>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Open the Tekton Dashboard from the main Tools Dashboard or the ICPA landing page.`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Create a Webhook in the Tekton Dashboard\n`}<img parentName=\"p\" {...{\n                \"src\": \"/images/webhook.png\",\n                \"alt\": \"Webhook\"\n              }}></img></p>\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`Click `}<strong parentName=\"li\">{`Webhook`}</strong>{` on the menu`}</li>\n              <li parentName=\"ul\">{`Click `}<strong parentName=\"li\">{`Add Webhook`}</strong>{` and enter the information for the webhook`}</li>\n              <li parentName=\"ul\">{`Name: `}<strong parentName=\"li\">{`insert name`}</strong></li>\n              <li parentName=\"ul\">{`Repository UR: `}<strong parentName=\"li\">{`template git repo url`}</strong></li>\n              <li parentName=\"ul\">{`Access Token: Create github access token with permission minimum write:repo_hook`}</li>\n              <li parentName=\"ul\">{`Namespace: `}<strong parentName=\"li\">{`insert namespace`}</strong></li>\n              <li parentName=\"ul\">{`Pipeline: select `}<strong parentName=\"li\">{`igc-java-gradle`}</strong>{` or `}<strong parentName=\"li\">{`igc-nodejs`}</strong></li>\n              <li parentName=\"ul\">{`Service Account: `}<strong parentName=\"li\">{`pipeline`}</strong></li>\n              <li parentName=\"ul\">{`Docker Registry:`}<ul parentName=\"li\">\n                  <li parentName=\"ul\">{`For OCP 3 internal registry use `}<inlineCode parentName=\"li\">{`docker-registry.default.svc:5000/{new-namespace}`}</inlineCode></li>\n                  <li parentName=\"ul\">{`For OCP 4 or CRC internal registry use `}<inlineCode parentName=\"li\">{`image-registry.openshift-image-registry.svc:5000/{new-namespace}`}</inlineCode></li>\n                  <li parentName=\"ul\">{`For external registry like IBM Container registry based on region use `}<inlineCode parentName=\"li\">{`us.icr.io/{namespace}`}</inlineCode>{` use an existing namespace in your IBM Cloud. Make sure to configure docker credentials in the Tekton Dashboard using your IAM API Key and `}<inlineCode parentName=\"li\">{`iamapikey`}</inlineCode>{` for username in your namespace.`}</li>\n                </ul></li>\n            </ul>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Check that Webhook is created on the Github repository (Settings-Webhooks)`}</p>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Make a change to the git repo and push the change to remote git repository or click on `}<strong parentName=\"p\">{`Pipelines`}</strong>{`\nand manually kick of a pipeline build`}</p>\n          </li>\n        </ul>\n      </Tab>\n    </Tabs>\n    <h3>{`enable`}</h3>\n    <p>{`Adds DevOps artifacts to a Git repo that the `}<Globals name=\"env\" mdxType=\"Globals\" />{` uses to deploy the app. The command displays a list of available pipelines and applies the one you select to your code repo. The DevOps files added to your repo include (but are not limited to):`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Helm chart`}</li>\n      <li parentName=\"ul\">{`Jenkinsfile`}</li>\n    </ul>\n    <p>{`This command DOES NOT require that the terminal is already logged in to an IBM Cloud account nor the cluster. It DOES require that the terminal’s current directory is the repository directory for your local copy of the Git repo.`}</p>\n    <p>{`The command will add files to the local repo. You should commit these new files and push them to the server repo. Then run `}<inlineCode parentName=\"p\">{`igc pipeline`}</inlineCode>{` to connect your repo to a pipeline in the environment.`}</p>\n    <p><strong parentName=\"p\">{`Command flags`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`--repo`}</inlineCode>{` — The set of pipelines to choose from; the default is `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/ibm-garage-cloud/garage-pipelines\"\n        }}>{`https://github.com/ibm-garage-cloud/garage-pipelines`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example usage`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Enable a project with artifacts`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-bash\"\n          }}>{`igc enable\n`}</code></pre>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}