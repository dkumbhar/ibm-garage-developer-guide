(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{RcCX:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return j}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),l=n("013z"),i=n("T0C+");n("qKvR");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={},p=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},c=p("PageDescription"),s=p("Accordion"),b=p("AccordionItem"),m=p("InlineNotification"),u=p("Tabs"),d=p("Tab"),h={_frontmatter:o},g=l.a;function j(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,["components"]);return Object(a.b)(g,r({},h,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{mdxType:"PageDescription"},Object(a.b)("p",null,"The ",Object(a.b)(i.a,{name:"shortName",mdxType:"Globals"})," Command Line Interface (CLI)")),Object(a.b)("p",null,"The ",Object(a.b)(i.a,{name:"longName",mdxType:"Globals"})," includes the IBM Garage for Cloud (IGC) Command Line Interface (CLI). The ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-garage-cloud/ibm-garage-cloud-cli"}),Object(a.b)(i.a,{name:"igccli",mdxType:"Globals"}))," provides a set of helpful utilities that can be invoked from the command line. The main objective is to make complicated CLI tasks and ",Object(a.b)("inlineCode",{parentName:"p"},"YAML"),",",Object(a.b)("inlineCode",{parentName:"p"},"configMap"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"secret")," configuration easier for a developer."),Object(a.b)("p",null,"These utilities include:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Register your application’s git repo into a CI pipeline (",Object(a.b)("a",r({parentName:"li"},{href:"/guides/continuous-integration"}),"Jenkins"),", ",Object(a.b)("a",r({parentName:"li"},{href:"/guides/continuous-integration-tekton"}),"Tekton"),", etc.)"),Object(a.b)("li",{parentName:"ul"},"List the ingress URLs for the tools installed in the environment"),Object(a.b)("li",{parentName:"ul"},"List the user names and passwords for the tools installed in the environment"),Object(a.b)("li",{parentName:"ul"},"Build and deploy images to the environment using the IBM Cloud Image Registry"),Object(a.b)("li",{parentName:"ul"},"Help copy ",Object(a.b)("inlineCode",{parentName:"li"},"configMaps")," and ",Object(a.b)("inlineCode",{parentName:"li"},"secrets")," into new projects/namespace in Kubernetes or OpenShift"),Object(a.b)("li",{parentName:"ul"},"Enable existing ",Object(a.b)(i.a,{name:"templates",mdxType:"Globals"})," with the necessary artifacts to be integrated easily into the ",Object(a.b)(i.a,{name:"env",mdxType:"Globals"}))),Object(a.b)("p",null,"You can either install the CLI onto your computer or install the Cloud Shell Commands environment."),Object(a.b)(s,{mdxType:"Accordion"},Object(a.b)(b,{title:"Install the CLI",mdxType:"AccordionItem"},Object(a.b)(m,{kind:"warning",mdxType:"InlineNotification"},"**Warning:** If you have installed the **IGC** CLI up to `v0.4.0` you must uninstall it and follow the installation steps below `npm rm -g @garage-catalyst/ibm-garage-cloud-cli`"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Install the CLI:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"npm i -g @ibmgaragecloud/cloud-native-toolkit-cli\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Verify the version:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc --version\n"))))),Object(a.b)(b,{title:"Install the Cloud Shell",mdxType:"AccordionItem"},Object(a.b)("p",null,"Follow the instructions in the ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/ibm-garage-cloud/cloud-shell-commands/blob/master/README.md"}),"cloud-shell-commands readme")," to install the Cloud Shell Commands."))),Object(a.b)("h2",null,"CLI help"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Run the CLI’s help command to list the available commands:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc --help\n")),Object(a.b)("p",{parentName:"li"},"  The help output looks like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"$ igc --help\nIBM Garage Cloud CLI\n\nUsage: igc <command> [args]\n\nCommands:\n  igc build              Build the image and push it into the IBM Cloud registry\n  igc create-webhook     Create a git webhook for a given Jenkins pipeline\n  igc credentials        Lists the urls and credentials for the tools deployed\n                         to the cluster\n  igc dashboard          Open the dashboard url in the default browser\n  igc deploy             Deploy an image from the IBM Cloud registry into a\n                         kubernetes cluster\n  igc enable             Enable the current repository with pipeline logic\n  igc endpoints          List the current ingress hosts for deployed apps in a\n                         namespace       [aliases: ingress, endpoint, ingresses]\n  igc generate-token     Generate a Jenkins api token\n  igc git-secret [name]  Create a kubernetes secret that contains the url,\n                         username, and personal access token for a git repo\n  igc jenkins-auth       Generate a Jenkins api token and register it as\n                         kubernetes secret\n  igc launch-tools       Launch the IBM Garage for Cloud tools image connected\n                         to the current directory\n  igc login              Log in using the ibmcloud cli, optionally configure the\n                         cluster, and optionally runs a command\n  igc namespace          Create a namespace (if it doesn't exist) and prepare it\n                         with the necessary configuration\n  igc pipeline           Register a pipeline for the current code repository\n  igc tool-config        Create the config map and secret for a tool configured\n                         in the environment\n  igc vlan               Print out the vlan values\n  igc yq <command>\n\nOptions:\n  --version  Show version number                                       [boolean]\n  --help     Show help                                                 [boolean]\n")),Object(a.b)("p",{parentName:"li"},"  The help for a specific command, ",Object(a.b)("inlineCode",{parentName:"p"},"pipeline"),", looks like this:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"$ igc pipeline --help\nigc pipeline\n\nRegister a pipeline for the current code repository\n\nOptions:\n  --version                Show version number                         [boolean]\n  --help                   Show help                                   [boolean]\n  --quiet                  Suppress all logging                        [boolean]\n  --debug                  Turn on extra logging                       [boolean]\n  --templateNamespace, -j  the namespace where Jenkins is running       [string]\n  --pipelineNamespace, -n  the namespace where the pipeline should be deployed\n                                                                        [string]\n  --skipWebhook            flag indicating that the webhook should not be\n                           created                                     [boolean]\n  --gitUsername, -u        username used to access the git repository\n  --gitPat, -p             the token used to authenticate the user\n  --values                 optional file with additional values to add to the\n                           secret\n  --tekton                 register a tekton pipeline                  [boolean]\n  --jenkins                register a jenkins pipeline                 [boolean]\n  --pipelineName           the name of the Tekton pipeline to use       [string]\n  --generateCrumb, -c      flag indicating that a crumb is required to complete\n                           the registration                     [default: false]\n")))),Object(a.b)("h2",null,"Use the CLI"),Object(a.b)(m,{mdxType:"InlineNotification"},Object(a.b)("p",null,"To use the ",Object(a.b)(i.a,{name:"igccli",mdxType:"Globals"}),", first install the ",Object(a.b)("a",r({parentName:"p"},{href:"/getting-started/prereqs"}),"prerequisite tools"),", which include:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)(i.a,{name:"ic",mdxType:"Globals"})," CLI"),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)(i.a,{name:"kube",mdxType:"Globals"})," CLI"),Object(a.b)("li",{parentName:"ul"},"The ",Object(a.b)(i.a,{name:"ocp",mdxType:"Globals"})," CLI"))),Object(a.b)("p",null,"To use the ",Object(a.b)(i.a,{name:"igccli",mdxType:"Globals"}),", most commands require that you be logged into your ",Object(a.b)(i.a,{name:"ic",mdxType:"Globals"})," account and cluster."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Log into your ",Object(a.b)(i.a,{name:"ic",mdxType:"Globals"})," account with the correct region and resource group:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"ibmcloud login -a cloud.ibm.com -r <region> -g <resource group>\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Log into your cluster:"))),Object(a.b)(s,{mdxType:"Accordion"},Object(a.b)(b,{title:"Kubernetes",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks cluster config --cluster <CLUSTER>\n"))),Object(a.b)(b,{title:"OpenShift",mdxType:"AccordionItem"},Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"oc login --server=<url> --token=<apikey>\n")))),Object(a.b)("p",null,"Once logged in, you can use the CLI commands."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"For example, this command lists the dashboard ingress URLs for all of the tools installed in the ",Object(a.b)("inlineCode",{parentName:"li"},"tools")," namespace:",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc endpoints -n tools\n")))),Object(a.b)("h2",null,"Available commands"),Object(a.b)("h3",null,"vlan"),Object(a.b)("p",null,"Lists the VLANs for a particular IBM Cloud region. This information is useful for preparing Terraform cluster creation steps."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cloud region. It does NOT need to be logged in to a cluster."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"List a pair of public/private VLANs for a new environment to use"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc vlan\n")))),Object(a.b)("h3",null,"dashboard"),Object(a.b)("p",null,"Opens the ",Object(a.b)("a",r({parentName:"p"},{href:"/getting-started/dashboard"}),"Developer Dashboard")," in the default browser. If a default browser has not been configured, then the URL to the Dashboard will be printed out."),Object(a.b)("p",null,"The dashboard is deployed in a namespace and displays the tools deployed in the same namesapce, as listed by the ",Object(a.b)("inlineCode",{parentName:"p"},"credentials")," command. Additional tools can be deployed to the namespace; then use the ",Object(a.b)("inlineCode",{parentName:"p"},"tool-config")," command to add a tool to the list of credentials and add a panel to the dashboard."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cluster."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-n")," — The namespace where the dashboard has been deployed; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"tools"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Open the dashboard in the default browser"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc dashboard\n")))),Object(a.b)("h3",null,"credentials"),Object(a.b)("p",null,"Lists the endpoints and credentials for the tools running in the environment. The tools reported include Jenkins, SonarQube, ArgoCD, etc."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cluster."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-n")," — The namespace where the tools have been deployed; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"tools"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"List the credentials for the tools installed in the ",Object(a.b)("inlineCode",{parentName:"p"},"tools")," namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc credentials -n my-namespace\n")),Object(a.b)("p",{parentName:"li"},"  The credentials output is a JSON doc like this"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"$ igc credentials\nCredentials:  {\n  argocd: {\n    user: 'admin',\n    password: '12345678',\n    url: 'https://argocd-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n  dashboard: {\n    url: 'https://dashboard-tools.mycluster.us-east.containers.appdomain.cloud'\n  },\n  . . .\n}\n")))),Object(a.b)("h3",null,"tool-config"),Object(a.b)("p",null,"Configures a new tool in the environment. After deploying the tool, use this command to add the tool to the list of credentials so that it will be displayed in the dashboard."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"The name for the tool"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-n")," — The tools namespace; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"tools")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--url")," — The endpoint for accessing the tool, usually its dashboard"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--username")," — (Optional) The user name for logging into to tool"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--password")," — (Optional) The password for logging into to tool")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Configure a tool named ",Object(a.b)("inlineCode",{parentName:"p"},"my-tool")," with its dashboard’s endpoint and credentials"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc tool-config my-tool --url https://mytool-dashboard.mycluster.us-east.containers.appdomain.cloud --username admin --password password\n")))),Object(a.b)("h3",null,"endpoints"),Object(a.b)("p",null,"Lists the ingress and/or route URLs for the applications in a namespace. The results are provided in an interactive menu. If one of the endpoints is selected, it will display the URL and launch it in the default browser. Selecting ",Object(a.b)("inlineCode",{parentName:"p"},"Exit")," will display the full list and exit."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cluster."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-n")," — The deployment namespace; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"dev"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"List the ingresses and route URLs for the apps running in the ",Object(a.b)("inlineCode",{parentName:"p"},"tools")," namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc endpoint -n tools\n")))),Object(a.b)("h3",null,"namespace"),Object(a.b)("p",null,"Creates a Kubernetes namespace or OpenShift project (if it doesn’t already exist) and adds the necessary data and tools to make it work well as part of the ",Object(a.b)(i.a,{name:"env",mdxType:"Globals"}),"."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cluster."),Object(a.b)("p",null,"The command adds a service account to the namespace containing the pull secrets for pulling images from the ",Object(a.b)("a",r({parentName:"p"},{href:"/guides/image-registry"}),"image registry"),". This enables the namespace to deploy containers from the registry."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-z")," — The name of the service account; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"default"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a namespace for performing testing, one that can deploy containers from the image registry"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc namespace test\n")))),Object(a.b)("p",null,"If the cluster is OpenShift, each build will be run in the developer’s project, so this command copies the resources needed to run the build pipeline from a template project that already has these resources (certain config maps and secrets that the pipeline uses). The project can be set up to run Jenkins pipelines, Tekton pipelines, or both."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-t")," — The template namespace; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"tools")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--jenkins")," — Install Jenkins into the namespace"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--tekton")," — Copy the available Tasks and Pipelines from the template namespace")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a namespace for building a Stock Trading app using Jenkins pipelines defined in the ",Object(a.b)("inlineCode",{parentName:"p"},"tools")," namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc namespace dev-stock --jenkins\n")))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Manual steps")),Object(a.b)("p",null,"Here is a comparison between how the ",Object(a.b)("inlineCode",{parentName:"p"},"namespace")," command works and the equivalent manual steps."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"To simplify steps, set an environment variable with your namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"export NAMESPACE=dev-{initial}\n")))),Object(a.b)(u,{mdxType:"Tabs"},Object(a.b)(d,{label:"Using the CLI",mdxType:"Tab"},"Run the `namespace` command to create the namespace and set it up.",Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"if Jenkins pipelines will be run in the namespace, include the ",Object(a.b)("inlineCode",{parentName:"li"},"--jenkins")," flag"),Object(a.b)("li",{parentName:"ul"},"if Tekton pipelines will be run in the namespace, include the ",Object(a.b)("inlineCode",{parentName:"li"},"--tekton")," flag"),Object(a.b)("li",{parentName:"ul"},"if both Jenkins and Tekton pipelines will be run, include both flags")),Object(a.b)("p",null,"For example"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"igc namespace $NAMESPACE --jenkins --tekton\n"))),Object(a.b)(d,{label:"Manual steps for OpenShift",mdxType:"Tab"},Object(a.b)("ol",null,Object(a.b)("li",null,"Create the namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"oc new-project $NAMESPACE\n"))),Object(a.b)("li",null,"Copy the pull secrets from the default namespace into your new namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"curl -OL https://raw.githubusercontent.com/ibm-garage-cloud/garage-terraform-modules/master/generic/cluster/namespaces/scripts/setup-namespace-pull-secrets.sh\n./setup-namespace-pull-secrets.sh $NAMESPACE\n"))),Object(a.b)("li",null,"Copy the ConfigMaps and Secrets from the tools namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"export sourcenamespace=tools;\nkubectl get configmap -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get configmap ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get secret -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get secret ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n"))),Object(a.b)("li",null,"If you will be using Jenkins, install Jenkins in the namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"oc new-app jenkins-ephemeral -n $NAMESPACE\n"))),Object(a.b)("li",null,"If you will be using Tekton, copy the Tekton tasks",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"export sourcenamespace=tools;\nkubectl get tasks.tekton.dev -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get tasks.tekton.dev ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get pipelines.tekton.dev -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get pipelines.tekton.dev ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n"))))),Object(a.b)(d,{label:"Manual steps for Kubernetes",mdxType:"Tab"},Object(a.b)("ol",null,Object(a.b)("li",null,"Create the namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"kubectl create namespace $NAMESPACE\n"))),Object(a.b)("li",null,"Copy the pull secrets from the default namespace into your new namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"curl -OL https://raw.githubusercontent.com/ibm-garage-cloud/garage-terraform-modules/master/generic/cluster/namespaces/scripts/setup-namespace-pull-secrets.sh\n./setup-namespace-pull-secrets.sh $NAMESPACE\n"))),Object(a.b)("li",null,"Copy the ConfigMaps and Secrets from the tools namespace",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"export sourcenamespace=tools;\nkubectl get configmap -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get configmap ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get secret -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get secret ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n"))),Object(a.b)("li",null,"If you will be using Tekton, copy the Tekton tasks",Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"export sourcenamespace=tools;\nkubectl get tasks.tekton.dev -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get tasks.tekton.dev ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\nkubectl get pipelines.tekton.dev -l grouping=garage-cloud-native-toolkit -n ${sourcenamespace} -o jsonpath='{ range .items[*] }{ .metadata.name }{ \"\\n\" }{ end }' | \\\n  while read cm; do\n    kubectl get pipelines.tekton.dev ${cm} --namespace ${sourcenamespace} --export -o yaml | \\\n      kubectl apply --namespace $NAMESPACE -f -\n  done\n")))))),Object(a.b)("h3",null,"pipeline"),Object(a.b)("p",null,"Connects a branch in a Git repo to a CI pipeline in the ",Object(a.b)(i.a,{name:"env",mdxType:"Globals"})," and triggers an initial build. When a new commit is added to the branch, that triggers the pipeline to run, which will rebuild and redeploy the app using the new code. The Git repo needs to be hosted using a site that supports triggers such as GitHub or GitLab. The environment supports CI pipelines implemented using Tekton or Jenkins."),Object(a.b)("p",null,"This command requires that the terminal is already logged in to the cluster. It also requires that the terminal’s current directory is the repository directory for your local copy of the Git repo. The command will use the local Git repo’s configuration to find the server copy."),Object(a.b)("p",null,"The command will prompt for the username and personal access token to access the Git repository, unless those are provided as command-line parameters. It will also prompt you for the branch to use to trigger builds; the default is ",Object(a.b)("inlineCode",{parentName:"p"},"master"),"."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-n")," — The deployment namespace; the default is ",Object(a.b)("inlineCode",{parentName:"li"},"dev")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-u")," — The username for accessing the Git repo"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"-p")," — The personal access token for accessing the Git repo"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--jenkins")," — Deploy using a Jenkins pipeline; this is the default"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--tekton")," — Deploy using a Tekton pipeline")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a Jenkins pipeline in the ",Object(a.b)("inlineCode",{parentName:"p"},"dev")," namespace and prompt for the Git credentials"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc pipeline --jenkins\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a Tekton pipeline in the ",Object(a.b)("inlineCode",{parentName:"p"},"my-dev")," namespace, using the Git credentials ",Object(a.b)("inlineCode",{parentName:"p"},"gituser")," and ",Object(a.b)("inlineCode",{parentName:"p"},"gitpat")),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc pipeline -n my-dev -u gituser -p gitpat --tekton\n")))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Manual steps")),Object(a.b)("p",null,"Here is a comparison between how the ",Object(a.b)("inlineCode",{parentName:"p"},"pipeline")," command works and the equivalent manual steps for Tekton."),Object(a.b)(u,{mdxType:"Tabs"},Object(a.b)(d,{label:"IGC Steps",mdxType:"Tab"},Object(a.b)("p",null,"One of the objectives of the ",Object(a.b)("strong",{parentName:"p"},"IBM Garage for Cloud Developer tools CLI")," is to\nremove complexity from the steps of configuring apps with OpenShift and\nKubernetes managed service."),Object(a.b)("br",null),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"IBM Garage CLI")," has been created to automate manual steps where it is\ndeemed necessary. When it comes to configuring ",Object(a.b)("strong",{parentName:"p"},"Tekton")," there are a number\nof key steps that developers can performing manually,  often with complex\nmanual steps the developer can introduce errors causing mistakes that are\nhard to debug. This\nis a perfect problem to be solved with simple automation."),Object(a.b)("br",null),Object(a.b)("p",null,"If you are happy to perform the manual steps switch over to the ",Object(a.b)("strong",{parentName:"p"},"Manual\nSteps")," tab above to understand what is required to configure a ",Object(a.b)("strong",{parentName:"p"},"Tekton")," Pipeline in Openshift or Kubernetes managed services manually."),Object(a.b)("br",null),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"The CLI has support for ",Object(a.b)("strong",{parentName:"p"},"Tekton")," by adding a ",Object(a.b)("inlineCode",{parentName:"p"},"--tekton")," parameter to\nthe ",Object(a.b)("inlineCode",{parentName:"p"},"igc\npipeline")," command."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc pipeline -n dev-{initials} --tekton\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"This will prepare the namespace/project with the necessary ",Object(a.b)("inlineCode",{parentName:"p"},"Tasks"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Pipelines"),", ",Object(a.b)("inlineCode",{parentName:"p"},"Secrets")," and ",Object(a.b)("inlineCode",{parentName:"p"},"configMaps")," needed for the ",Object(a.b)("inlineCode",{parentName:"p"},"Pipelines")," to\nexecute inside the Tekton CI environment."),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"Getting git parameters\n  Project git repo: https://github.com/mooc-team-one/hello-world-one.git\n? Provide the username: {git userid}\n? Provide your password/personal access token: [hidden]\n? Provide the branch the pipeline should use: master\nSetting up dev-mjp namespace\nChecking for existing namespace: dev-mjp\nSetting up pull secrets\nSetting up tls secrets\nAdding pull secrets to serviceAccount\nCopying ConfigMaps\nCopying Secrets\nCopying Tekton tasks\nCopying Tekton pipelines\nCopying Jenkins credentials\nCreating service account: pipeline\nCreating Git PipelineResource\nCreating Image PipelineResource\n? Select the Pipeline to use in the PipelineRun: igc-nodejs\nCreating PipelineRun for pipeline: igc-nodejs\n"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Once the App has been configured to be built and managed by ",Object(a.b)("strong",{parentName:"p"},"Tekton")," you\ncan now view the ",Object(a.b)("inlineCode",{parentName:"p"},"Pipeline")," progress using the various Tekton Dashboards or\n",Object(a.b)("inlineCode",{parentName:"p"},"tkn")," CLI.")))),Object(a.b)(d,{label:"Manual Steps for Tekton",mdxType:"Tab"},Object(a.b)("p",null,"The following is the list of steps required to manually configure a ",Object(a.b)("strong",{parentName:"p"},"Tekton\n")," pipeline with your development cluster."),Object(a.b)("br",null),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Configure the service account ",Object(a.b)("inlineCode",{parentName:"li"},"pipeline")," if it doesn’t exist, on OpenShift 4 the operator takes care of this you can skip.",Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"oc create serviceaccount pipeline\noc adm policy add-scc-to-user privileged -z pipeline\noc adm policy add-role-to-user edit -z pipeline\n"))),Object(a.b)("li",{parentName:"ul"},"Clone the tasks from the ",Object(a.b)("inlineCode",{parentName:"li"},"tools")," namespace into the ",Object(a.b)("inlineCode",{parentName:"li"},"new-namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),'kubectl get tasks --export -o yaml -n tools  | sed s/"namespace: tools/namespace: $(oc project -q)"/ | kubectl apply -f -\n'))),Object(a.b)("li",{parentName:"ul"},"Clone the pipelines from the ",Object(a.b)("inlineCode",{parentName:"li"},"tools")," namespace into the ",Object(a.b)("inlineCode",{parentName:"li"},"new-namespace"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),'kubectl get pipelines --export -o yaml -n tools  | sed s/"namespace: tools/namespace: $(oc project -q)"/ | kubectl apply -f -\n')))),Object(a.b)("h3",null,"Manually trigger a Pipeline"),Object(a.b)("h3",null,"Pipeline Resource"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a Pipeline resource for the git repository, replace with the correct github url for your repository\nUse the ",Object(a.b)("inlineCode",{parentName:"p"},"tkn")," CLI to create ",Object(a.b)("inlineCode",{parentName:"p"},"git")," resource input the github repo url for ",Object(a.b)("inlineCode",{parentName:"p"},"url")," and branch for ",Object(a.b)("inlineCode",{parentName:"p"},"revision")),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"tkn resource create\n")),Object(a.b)("p",{parentName:"li"},"Here is the an example of the cli"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),'tkn resource create\n? Enter a name for a pipeline resource : nodejs-typescript-git\n? Select a resource type to create : git\n? Enter a value for url :  https://github.com/{user or org}/{app}\n? Enter a value for revision :  master\nNew git resource "nodejs-typescript-git" has been created\n'))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a Pipeline resource for the docker image registry, you can use the internal registry in OpenShift or use an external registry like IBM Container Registry (credentials need setup)\nUse the ",Object(a.b)("inlineCode",{parentName:"p"},"tkn")," CLI to create ",Object(a.b)("inlineCode",{parentName:"p"},"image")," resource"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"tkn resource create\n")),Object(a.b)("p",{parentName:"li"},"Select ",Object(a.b)("inlineCode",{parentName:"p"},"image")," for type."),Object(a.b)("p",{parentName:"li"},"Enter the corresponding ",Object(a.b)("inlineCode",{parentName:"p"},"url")," for container registry, use the new-namespace} in the url"),Object(a.b)("p",{parentName:"li"},"For OCP 3 internal registry use ",Object(a.b)("inlineCode",{parentName:"p"},"docker-registry.default.svc:5000/{new-namespace}/node-typescript:latest")),Object(a.b)("p",{parentName:"li"},"For OCP 4 or CRC internal registry use ",Object(a.b)("inlineCode",{parentName:"p"},"image-registry.openshift-image-registry.svc:5000/{new-namespace}/node-typescript:latest")),Object(a.b)("p",{parentName:"li"},"For external registry like IBM Container registry based on region use ",Object(a.b)("inlineCode",{parentName:"p"},"us.icr.io/{namespace}/node-typescript:latest")," use an existing namespace in your IBM Cloud"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),'tkn resource create\n? Enter a name for a pipeline resource : nodejs-typescript-image\n? Select a resource type to create : image\n? Enter a value for url :  docker-registry.default.svc:5000/dev/node-typescript:latest\n? Enter a value for digest :\nNew image resource "nodejs-typescript-image" has been created\n'))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Select the pipeline, to show the available pipeline run"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"tkn pipeline ls\nNAME              AGE              LAST RUN   STARTED   DURATION   STATUS\nigc-java-gradle   33 minutes ago   ---        ---       ---        ---\nigc-nodejs        33 minutes ago   ---        ---       ---        ---\n")),Object(a.b)("p",{parentName:"li"},"In this case use ",Object(a.b)("inlineCode",{parentName:"p"},"igc-java-gradle")," for java or ",Object(a.b)("inlineCode",{parentName:"p"},"igc-nodejs")," for nodejs.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Run the Pipeline using the ",Object(a.b)("inlineCode",{parentName:"p"},"git")," and ",Object(a.b)("inlineCode",{parentName:"p"},"image")," Pipeline resources.\nSet the following environment variable for convienience:"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"export PIPELINE=igc-nodejs\nexport GIT=nodejs-typescript-git\nexport IMAGE=nodejs-typescript-image\n")),Object(a.b)("p",{parentName:"li"},"Then run the ",Object(a.b)("inlineCode",{parentName:"p"},"tkn pipeline start")," with the input arguments using the service account ",Object(a.b)("inlineCode",{parentName:"p"},"pipeline")),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{}),"tkn pipeline start \\\n${PIPELINE} \\\n-r git-source=${GIT} \\\n-r docker-image=${IMAGE} \\\n-s pipeline\n")))),Object(a.b)("h3",null,"Create a Git Webhook"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Open the Tekton Dashboard from the main Tools Dashboard or the ICPA landing page.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Create a Webhook in the Tekton Dashboard\n",Object(a.b)("img",r({parentName:"p"},{src:"/images/webhook.png",alt:"Webhook"}))),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Click ",Object(a.b)("strong",{parentName:"li"},"Webhook")," on the menu"),Object(a.b)("li",{parentName:"ul"},"Click ",Object(a.b)("strong",{parentName:"li"},"Add Webhook")," and enter the information for the webhook"),Object(a.b)("li",{parentName:"ul"},"Name: ",Object(a.b)("strong",{parentName:"li"},"insert name")),Object(a.b)("li",{parentName:"ul"},"Repository UR: ",Object(a.b)("strong",{parentName:"li"},"template git repo url")),Object(a.b)("li",{parentName:"ul"},"Access Token: Create github access token with permission minimum write:repo_hook"),Object(a.b)("li",{parentName:"ul"},"Namespace: ",Object(a.b)("strong",{parentName:"li"},"insert namespace")),Object(a.b)("li",{parentName:"ul"},"Pipeline: select ",Object(a.b)("strong",{parentName:"li"},"igc-java-gradle")," or ",Object(a.b)("strong",{parentName:"li"},"igc-nodejs")),Object(a.b)("li",{parentName:"ul"},"Service Account: ",Object(a.b)("strong",{parentName:"li"},"pipeline")),Object(a.b)("li",{parentName:"ul"},"Docker Registry:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"For OCP 3 internal registry use ",Object(a.b)("inlineCode",{parentName:"li"},"docker-registry.default.svc:5000/{new-namespace}")),Object(a.b)("li",{parentName:"ul"},"For OCP 4 or CRC internal registry use ",Object(a.b)("inlineCode",{parentName:"li"},"image-registry.openshift-image-registry.svc:5000/{new-namespace}")),Object(a.b)("li",{parentName:"ul"},"For external registry like IBM Container registry based on region use ",Object(a.b)("inlineCode",{parentName:"li"},"us.icr.io/{namespace}")," use an existing namespace in your IBM Cloud. Make sure to configure docker credentials in the Tekton Dashboard using your IAM API Key and ",Object(a.b)("inlineCode",{parentName:"li"},"iamapikey")," for username in your namespace."))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Check that Webhook is created on the Github repository (Settings-Webhooks)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Make a change to the git repo and push the change to remote git repository or click on ",Object(a.b)("strong",{parentName:"p"},"Pipelines"),"\nand manually kick of a pipeline build"))))),Object(a.b)("h3",null,"enable"),Object(a.b)("p",null,"Adds DevOps artifacts to a Git repo that the ",Object(a.b)(i.a,{name:"env",mdxType:"Globals"})," uses to deploy the app. The command displays a list of available pipelines and applies the one you select to your code repo. The DevOps files added to your repo include (but are not limited to):"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Helm chart"),Object(a.b)("li",{parentName:"ul"},"Jenkinsfile")),Object(a.b)("p",null,"This command DOES NOT require that the terminal is already logged in to an IBM Cloud account nor the cluster. It DOES require that the terminal’s current directory is the repository directory for your local copy of the Git repo."),Object(a.b)("p",null,"The command will add files to the local repo. You should commit these new files and push them to the server repo. Then run ",Object(a.b)("inlineCode",{parentName:"p"},"igc pipeline")," to connect your repo to a pipeline in the environment."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Command flags")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"--repo")," — The set of pipelines to choose from; the default is ",Object(a.b)("a",r({parentName:"li"},{href:"https://github.com/ibm-garage-cloud/garage-pipelines"}),"https://github.com/ibm-garage-cloud/garage-pipelines"))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Example usage")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Enable a project with artifacts"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"igc enable\n")))))}j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-getting-started-cli-index-mdx-e7d0ff34a60228d9e230.js.map